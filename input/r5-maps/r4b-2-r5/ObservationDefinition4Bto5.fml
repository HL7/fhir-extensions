/// url = 'http://hl7.org/fhir/StructureMap/ObservationDefinition4Bto5'
/// name = 'ObservationDefinition4Bto5'
/// title = 'FML Conversion for ObservationDefinition: R4B to R5'

conceptmap "AdministrativeGender" {
  prefix s = "http://hl7.org/fhir/4.3/administrative-gender"
  prefix t = "http://hl7.org/fhir/administrative-gender"

  s:"male" - t:"male"
  s:"female" - t:"female"
  s:"other" - t:"other"
  s:"unknown" - t:"unknown"
}

conceptmap "ObservationDataType" {
  prefix s = "http://hl7.org/fhir/4.3/permitted-data-type"
  prefix t = "http://hl7.org/fhir/permitted-data-type"

  s:"Quantity" - t:"Quantity"
  s:"CodeableConcept" - t:"CodeableConcept"
  s:"string" - t:"string"
  s:"boolean" - t:"boolean"
  s:"integer" - t:"integer"
  s:"Range" - t:"Range"
  s:"Ratio" - t:"Ratio"
  s:"SampledData" - t:"SampledData"
  s:"time" - t:"time"
  s:"dateTime" - t:"dateTime"
  s:"Period" - t:"Period"
}

conceptmap "ObservationRangeCategory" {
  prefix s = "http://hl7.org/fhir/4.3/observation-range-category"
  prefix t = "http://hl7.org/fhir/observation-range-category"

  s:"reference" - t:"reference"
  s:"critical" - t:"critical"
  s:"absolute" - t:"absolute"
}

conceptmap "PublicationStatus" {
  prefix s = "http://hl7.org/fhir/4.3/publication-status"
  prefix t = "http://hl7.org/fhir/publication-status"

  s:"draft" - t:"draft"
  s:"active" - t:"active"
  s:"retired" - t:"retired"
  s:"unknown" - t:"unknown"
}

uses "http://hl7.org/fhir/4.3/StructureDefinition/ObservationDefinition" alias ObservationDefinitionR4B as source
uses "http://hl7.org/fhir/StructureDefinition/ObservationDefinition" alias ObservationDefinitionR5 as target

imports "http://hl7.org/fhir/StructureMap/*4Bto5"

group ObservationDefinition(source src : ObservationDefinitionR4B, target tgt : ObservationDefinitionR5) extends DomainResource <<type+>> {
  src.url -> tgt.url;
  src.identifier -> tgt.identifier;
  src.version -> tgt.version;
  src.versionAlgorithm : string -> tgt.versionAlgorithm;
  src.versionAlgorithm : Coding -> tgt.versionAlgorithm;
  src.name -> tgt.name;
  src.title -> tgt.title;
  src.status as v -> tgt.status = translate(v, '#PublicationStatus', 'code');
  src.experimental -> tgt.experimental;
  src.date -> tgt.date;
  src.publisher -> tgt.publisher;
  src.contact -> tgt.contact;
  src.description -> tgt.description;
  src.useContext -> tgt.useContext;
  src.jurisdiction -> tgt.jurisdiction;
  src.purpose -> tgt.purpose;
  src.copyright -> tgt.copyright;
  src.copyrightLabel -> tgt.copyrightLabel;
  src.approvalDate -> tgt.approvalDate;
  src.lastReviewDate -> tgt.lastReviewDate;
  src.effectivePeriod -> tgt.effectivePeriod;
  src.derivedFromCanonical -> tgt.derivedFromCanonical;
  src.derivedFromUri -> tgt.derivedFromUri;
  src.subject -> tgt.subject;
  src.performerType -> tgt.performerType;
  src.category -> tgt.category;
  src.code -> tgt.code;
  src.permittedDataType as v -> tgt.permittedDataType = translate(v, '#ObservationDataType', 'code');
  src.multipleResultsAllowed -> tgt.multipleResultsAllowed;
  src.bodySite -> tgt.bodySite;
  src.method -> tgt.method;
  src.specimen -> tgt.specimen;
  src.device -> tgt.device;
  src.preferredReportName -> tgt.preferredReportName;
  src.quantitativeDetails as s -> tgt.quantitativeDetails as t then ObservationDefinitionQuantitativeDetails(s,t);
  src.qualifiedValue as s -> tgt.qualifiedValue as t then ObservationDefinitionQualifiedValue(s,t);
  src.hasMember -> tgt.hasMember;
  src.component as s -> tgt.component as t then ObservationDefinitionComponent(s,t);
}

group ObservationDefinitionQuantitativeDetails(source src, target tgt) extends BackboneElement {
  src.unit -> tgt.unit;
  src.customaryUnit -> tgt.customaryUnit;
  src.conversionFactor -> tgt.conversionFactor;
  src.decimalPrecision -> tgt.decimalPrecision;
}

group ObservationDefinitionQualifiedValue(source src, target tgt) extends BackboneElement {
  src.context -> tgt.context;
  src.appliesTo -> tgt.appliesTo;
  src.gender as v -> tgt.gender = translate(v, '#AdministrativeGender', 'code');
  src.age -> tgt.age;
  src.gestationalAge -> tgt.gestationalAge;
  src.condition -> tgt.condition;
  src.rangeCategory as v -> tgt.rangeCategory = translate(v, '#ObservationRangeCategory', 'code');
  src.range -> tgt.range;
  src.validCodedValueSet -> tgt.validCodedValueSet;
  src.normalCodedValueSet -> tgt.normalCodedValueSet;
  src.abnormalCodedValueSet -> tgt.abnormalCodedValueSet;
  src.criticalCodedValueSet -> tgt.criticalCodedValueSet;
}

group ObservationDefinitionComponent(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.permittedDataType as v -> tgt.permittedDataType = translate(v, '#ObservationDataType', 'code');
}

