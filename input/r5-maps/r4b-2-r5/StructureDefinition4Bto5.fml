/// url = 'http://hl7.org/fhir/StructureMap/StructureDefinition4Bto5'
/// name = 'StructureDefinition4Bto5'
/// title = 'FML Conversion for StructureDefinition: R4B to R5'

/// status = 'active'

conceptmap "ExtensionContextType" {
  prefix s = "http://hl7.org/fhir/4.3/extension-context-type"
  prefix t = "http://hl7.org/fhir/extension-context-type"

  s:"fhirpath" - t:"fhirpath"
  s:"element" - t:"element"
  s:"extension" - t:"extension"
}

conceptmap "PublicationStatus" {
  prefix s = "http://hl7.org/fhir/4.3/publication-status"
  prefix t = "http://hl7.org/fhir/publication-status"

  s:"draft" - t:"draft"
  s:"active" - t:"active"
  s:"retired" - t:"retired"
  s:"unknown" - t:"unknown"
}

conceptmap "StructureDefinitionKind" {
  prefix s = "http://hl7.org/fhir/4.3/structure-definition-kind"
  prefix t = "http://hl7.org/fhir/structure-definition-kind"

  s:"primitive-type" - t:"primitive-type"
  s:"complex-type" - t:"complex-type"
  s:"resource" - t:"resource"
  s:"logical" - t:"logical"
}

conceptmap "TypeDerivationRule" {
  prefix s = "http://hl7.org/fhir/4.3/type-derivation-rule"
  prefix t = "http://hl7.org/fhir/type-derivation-rule"

  s:"specialization" - t:"specialization"
  s:"constraint" - t:"constraint"
}

uses "http://hl7.org/fhir/4.3/StructureDefinition/StructureDefinition" alias StructureDefinitionR4B as source
uses "http://hl7.org/fhir/StructureDefinition/StructureDefinition" alias StructureDefinitionR5 as target

imports "http://hl7.org/fhir/StructureMap/*4Bto5"

group StructureDefinition(source src : StructureDefinitionR4B, target tgt : StructureDefinitionR5) extends DomainResource <<type+>> {
  src.url -> tgt.url;
  src.identifier -> tgt.identifier;
  src.version -> tgt.version;
//  src.versionAlgorithm : string -> tgt.versionAlgorithm;
//  src.versionAlgorithm : Coding -> tgt.versionAlgorithm;
  src.name -> tgt.name;
  src.title -> tgt.title;
  src.status as v -> tgt.status = translate(v, '#PublicationStatus', 'code');
  src.experimental -> tgt.experimental;
  src.date -> tgt.date;
  src.publisher -> tgt.publisher;
  src.contact -> tgt.contact;
  src.description -> tgt.description;
  src.useContext -> tgt.useContext;
  src.jurisdiction -> tgt.jurisdiction;
  src.purpose -> tgt.purpose;
  src.copyright -> tgt.copyright;
//  src.copyrightLabel -> tgt.copyrightLabel;
  src.keyword -> tgt.keyword;
  src.fhirVersion -> tgt.fhirVersion;
  src.mapping as s -> tgt.mapping as t then StructureDefinitionMapping(s,t);
  src.kind as v -> tgt.kind = translate(v, '#StructureDefinitionKind', 'code');
  src.abstract -> tgt.abstract;
  src.context as s -> tgt.context as t then StructureDefinitionContext(s,t);
  src.contextInvariant -> tgt.contextInvariant;
  src.type -> tgt.type;
  src.baseDefinition -> tgt.baseDefinition;
  src.derivation as v -> tgt.derivation = translate(v, '#TypeDerivationRule', 'code');
  src.snapshot as s -> tgt.snapshot as t then StructureDefinitionSnapshot(s,t);
  src.differential as s -> tgt.differential as t then StructureDefinitionDifferential(s,t);
}

group StructureDefinitionMapping(source src, target tgt) extends BackboneElement {
  src.identity -> tgt.identity;
  src.uri -> tgt.uri;
  src.name -> tgt.name;
  src.comment -> tgt.comment;
}

group StructureDefinitionContext(source src, target tgt) extends BackboneElement {
  src.type as v -> tgt.type = translate(v, '#ExtensionContextType', 'code');
  src.expression -> tgt.expression;
}

group StructureDefinitionSnapshot(source src, target tgt) extends BackboneElement {
  src.element -> tgt.element;
}

group StructureDefinitionDifferential(source src, target tgt) extends BackboneElement {
  src.element -> tgt.element;
}

