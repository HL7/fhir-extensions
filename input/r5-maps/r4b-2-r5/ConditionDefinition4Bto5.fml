/// url = 'http://hl7.org/fhir/StructureMap/ConditionDefinition4Bto5'
/// name = 'ConditionDefinition4Bto5'
/// title = 'FML Conversion for ConditionDefinition: R4B to R5'

conceptmap "ConditionPreconditionType" {
  prefix s = "http://hl7.org/fhir/4.3/condition-precondition-type"
  prefix t = "http://hl7.org/fhir/condition-precondition-type"

  s:"sensitive" - t:"sensitive"
  s:"specific" - t:"specific"
}

conceptmap "ConditionQuestionnairePurpose" {
  prefix s = "http://hl7.org/fhir/4.3/condition-questionnaire-purpose"
  prefix t = "http://hl7.org/fhir/condition-questionnaire-purpose"

  s:"preadmit" - t:"preadmit"
  s:"diff-diagnosis" - t:"diff-diagnosis"
  s:"outcome" - t:"outcome"
}

conceptmap "PublicationStatus" {
  prefix s = "http://hl7.org/fhir/4.3/publication-status"
  prefix t = "http://hl7.org/fhir/publication-status"

  s:"draft" - t:"draft"
  s:"active" - t:"active"
  s:"retired" - t:"retired"
  s:"unknown" - t:"unknown"
}

uses "http://hl7.org/fhir/4.3/StructureDefinition/ConditionDefinition" alias ConditionDefinitionR4B as source
uses "http://hl7.org/fhir/StructureDefinition/ConditionDefinition" alias ConditionDefinitionR5 as target

imports "http://hl7.org/fhir/StructureMap/*4Bto5"

group ConditionDefinition(source src : ConditionDefinitionR4B, target tgt : ConditionDefinitionR5) extends DomainResource <<type+>> {
  src.url -> tgt.url;
  src.identifier -> tgt.identifier;
  src.version -> tgt.version;
  src.versionAlgorithm : string -> tgt.versionAlgorithm;
  src.versionAlgorithm : Coding -> tgt.versionAlgorithm;
  src.name -> tgt.name;
  src.title -> tgt.title;
  src.subtitle -> tgt.subtitle;
  src.status as v -> tgt.status = translate(v, '#PublicationStatus', 'code');
  src.experimental -> tgt.experimental;
  src.date -> tgt.date;
  src.publisher -> tgt.publisher;
  src.contact -> tgt.contact;
  src.description -> tgt.description;
  src.useContext -> tgt.useContext;
  src.jurisdiction -> tgt.jurisdiction;
  src.code -> tgt.code;
  src.severity -> tgt.severity;
  src.bodySite -> tgt.bodySite;
  src.stage -> tgt.stage;
  src.hasSeverity -> tgt.hasSeverity;
  src.hasBodySite -> tgt.hasBodySite;
  src.hasStage -> tgt.hasStage;
  src.definition -> tgt.definition;
  src.observation as s -> tgt.observation as t then ConditionDefinitionObservation(s,t);
  src.medication as s -> tgt.medication as t then ConditionDefinitionMedication(s,t);
  src.precondition as s -> tgt.precondition as t then ConditionDefinitionPrecondition(s,t);
  src.team -> tgt.team;
  src.questionnaire as s -> tgt.questionnaire as t then ConditionDefinitionQuestionnaire(s,t);
  src.plan as s -> tgt.plan as t then ConditionDefinitionPlan(s,t);
}

group ConditionDefinitionObservation(source src, target tgt) extends BackboneElement {
  src.category -> tgt.category;
  src.code -> tgt.code;
}

group ConditionDefinitionMedication(source src, target tgt) extends BackboneElement {
  src.category -> tgt.category;
  src.code -> tgt.code;
}

group ConditionDefinitionPrecondition(source src, target tgt) extends BackboneElement {
  src.type as v -> tgt.type = translate(v, '#ConditionPreconditionType', 'code');
  src.code -> tgt.code;
  src.value : CodeableConcept -> tgt.value;
  src.value : Quantity -> tgt.value;
}

group ConditionDefinitionQuestionnaire(source src, target tgt) extends BackboneElement {
  src.purpose as v -> tgt.purpose = translate(v, '#ConditionQuestionnairePurpose', 'code');
  src.reference -> tgt.reference;
}

group ConditionDefinitionPlan(source src, target tgt) extends BackboneElement {
  src.role -> tgt.role;
  src.reference -> tgt.reference;
}

