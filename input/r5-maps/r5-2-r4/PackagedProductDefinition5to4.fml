/// url = 'http://hl7.org/fhir/StructureMap/PackagedProductDefinition5to4'
/// name = 'PackagedProductDefinition5to4'
/// title = 'FML Conversion for PackagedProductDefinition: R5 to R4'

uses "http://hl7.org/fhir/StructureDefinition/PackagedProductDefinition" alias PackagedProductDefinitionR5 as source
uses "http://hl7.org/fhir/4.0/StructureDefinition/PackagedProductDefinition" alias PackagedProductDefinitionR4 as target

imports "http://hl7.org/fhir/StructureMap/*5to4"

group PackagedProductDefinition(source src : PackagedProductDefinitionR5, target tgt : PackagedProductDefinitionR4) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.name -> tgt.name;
  src.type -> tgt.type;
  src.packageFor -> tgt.packageFor;
  src.status -> tgt.status;
  src.statusDate -> tgt.statusDate;
  src.containedItemQuantity -> tgt.containedItemQuantity;
  src.description -> tgt.description;
  src.legalStatusOfSupply as s -> tgt.legalStatusOfSupply as t then PackagedProductDefinitionLegalStatusOfSupply(s,t);
  src.marketingStatus -> tgt.marketingStatus;
  src.copackagedIndicator -> tgt.copackagedIndicator;
  src.manufacturer -> tgt.manufacturer;
  src.attachedDocument -> tgt.attachedDocument;
  src.packaging as s -> tgt.packaging as t then PackagedProductDefinitionPackaging(s,t);
}

group PackagedProductDefinitionLegalStatusOfSupply(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.jurisdiction -> tgt.jurisdiction;
}

group PackagedProductDefinitionPackaging(source src, target tgt) extends BackboneElement {
  src.identifier -> tgt.identifier;
  src.type -> tgt.type;
  src.componentPart -> tgt.componentPart;
  src.quantity -> tgt.quantity;
  src.material -> tgt.material;
  src.alternateMaterial -> tgt.alternateMaterial;
  src.shelfLifeStorage -> tgt.shelfLifeStorage;
  src.manufacturer -> tgt.manufacturer;
  src.property as s -> tgt.property as t then PackagedProductDefinitionPackagingProperty(s,t);
  src.containedItem as s -> tgt.containedItem as t then PackagedProductDefinitionPackagingContainedItem(s,t);
}

group PackagedProductDefinitionPackagingProperty(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.value : CodeableConcept -> tgt.value;
  src.value : Quantity -> tgt.value;
  src.value : date -> tgt.value;
  src.value : boolean -> tgt.value;
  src.value : Attachment -> tgt.value;
}

group PackagedProductDefinitionPackagingContainedItem(source src, target tgt) extends BackboneElement {
  src.item -> tgt.item;
  src.amount -> tgt.amount;
}

