/// url = 'http://hl7.org/fhir/StructureMap/AdverseEvent5to4'
/// name = 'AdverseEvent5to4'
/// title = 'FML Conversion for AdverseEvent: R5 to R4'

conceptmap "AdverseEventActuality" {
  prefix s = "http://hl7.org/fhir/adverse-event-actuality"
  prefix t = "http://hl7.org/fhir/4.0/adverse-event-actuality"

  s:"actual" - t:"actual"
  s:"potential" - t:"potential"
}

uses "http://hl7.org/fhir/StructureDefinition/AdverseEvent" alias AdverseEventR5 as source
uses "http://hl7.org/fhir/4.0/StructureDefinition/AdverseEvent" alias AdverseEventR4 as target

imports "http://hl7.org/fhir/StructureMap/*5to4"

group AdverseEvent(source src : AdverseEventR5, target tgt : AdverseEventR4) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
//  src.status -> tgt.status;
  src.actuality as v -> tgt.actuality = translate(v, '#AdverseEventActuality', 'code');
  src.category -> tgt.category;
  src.code -> tgt.event;
  src.subject -> tgt.subject;
  src.encounter -> tgt.encounter;
  src.occurrence : dateTime -> tgt.date;
  src.occurrence : Period as v -> tgt.date = v.start "periodDateTime";
  src.occurrence : Timing as v -> tgt.date = v.event "timingDateTime";
  src.detected -> tgt.detected;
  src.recordedDate -> tgt.recordedDate;
  src.resultingEffect -> tgt.resultingCondition;
  src.location -> tgt.location;
  src.seriousness -> tgt.seriousness;
  src.outcome -> tgt.outcome;
  src.recorder -> tgt.recorder;
  src.participant as s -> tgt.contributor as t then AdverseEventParticipant(s,t);
  src.study -> tgt.study;
//  src.expectedInResearchStudy -> tgt.expectedInResearchStudy;
  src.suspectEntity as s -> tgt.suspectEntity as t then AdverseEventSuspectEntity(s,t);
  src.contributingFactor as s -> tgt.subjectMedicalHistory as t then AdverseEventContributingFactor(s,t);
//  src.preventiveAction as s -> tgt.preventiveAction as t then AdverseEventPreventiveAction(s,t);
//  src.mitigatingAction as s -> tgt.mitigatingAction as t then AdverseEventMitigatingAction(s,t);
//  src.supportingInfo as s -> tgt.supportingInfo as t then AdverseEventSupportingInfo(s,t);
//  src.note -> tgt.note;
}

group AdverseEventParticipant(source src, target tgt) extends BackboneElement {
//  src.function -> tgt.function;
  src.actor as v -> tgt = v "reference";
}

group AdverseEventSuspectEntity(source src, target tgt) extends BackboneElement {
//  src.instance : CodeableConcept -> tgt.instance;
  src.instance : Reference -> tgt.instance;
  src.causality as s -> tgt.causality as t then AdverseEventSuspectEntityCausality(s,t);
}

group AdverseEventSuspectEntityCausality(source src, target tgt) extends BackboneElement {
  src.assessmentMethod -> tgt.assessment;
  src.entityRelatedness -> tgt.productRelatedness;
  src.author -> tgt.author;
}

group AdverseEventContributingFactor(source src, target tgt) extends BackboneElement {
  src.item : Reference as v -> tgt = v "reference";
//  src.item : CodeableConcept -> tgt.item;
}

//group AdverseEventPreventiveAction(source src, target tgt) extends BackboneElement {
//  src.item : Reference -> tgt.item;
//  src.item : CodeableConcept -> tgt.item;
//}
//
//group AdverseEventMitigatingAction(source src, target tgt) extends BackboneElement {
//  src.item : Reference -> tgt.item;
//  src.item : CodeableConcept -> tgt.item;
//}
//
//group AdverseEventSupportingInfo(source src, target tgt) extends BackboneElement {
//  src.item : Reference -> tgt.item;
//  src.item : CodeableConcept -> tgt.item;
//}

