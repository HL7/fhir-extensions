/// url = 'http://hl7.org/fhir/StructureMap/MeasureReport4to5'
/// name = 'MeasureReport4to5'
/// title = 'FML Conversion for MeasureReport: R4 to R5'

conceptmap "MeasureReportStatus" {
  prefix s = "http://hl7.org/fhir/4.0/measure-report-status"
  prefix t = "http://hl7.org/fhir/measure-report-status"

  s:"complete" - t:"complete"
  s:"pending" - t:"pending"
  s:"error" - t:"error"
}

conceptmap "MeasureReportType" {
  prefix s = "http://hl7.org/fhir/4.0/measure-report-type"
  prefix t = "http://hl7.org/fhir/measure-report-type"

  s:"individual" - t:"individual"
  s:"subject-list" - t:"subject-list"
  s:"summary" - t:"summary"
  s:"data-exchange" - t:"data-exchange"
}

conceptmap "SubmitDataUpdateType" {
  prefix s = "http://hl7.org/fhir/4.0/CodeSystem/submit-data-update-type"
  prefix t = "http://hl7.org/fhir/CodeSystem/submit-data-update-type"

  s:"incremental" - t:"incremental"
  s:"snapshot" - t:"snapshot"
}

uses "http://hl7.org/fhir/4.0/StructureDefinition/MeasureReport" alias MeasureReportR4 as source
uses "http://hl7.org/fhir/StructureDefinition/MeasureReport" alias MeasureReportR5 as target

imports "http://hl7.org/fhir/StructureMap/*4to5"

group MeasureReport(source src : MeasureReportR4, target tgt : MeasureReportR5) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.status as v -> tgt.status = translate(v, '#MeasureReportStatus', 'code');
  src.type as v -> tgt.type = translate(v, '#MeasureReportType', 'code');
  src.dataUpdateType as v -> tgt.dataUpdateType = translate(v, '#SubmitDataUpdateType', 'code');
  src.measure -> tgt.measure;
  src.subject -> tgt.subject;
  src.date -> tgt.date;
  src.reporter -> tgt.reporter;
  src.reportingVendor -> tgt.reportingVendor;
  src.location -> tgt.location;
  src.period -> tgt.period;
  src.inputParameters -> tgt.inputParameters;
  src.scoring -> tgt.scoring;
  src.improvementNotation -> tgt.improvementNotation;
  src.group as s -> tgt.group as t then MeasureReportGroup(s,t);
  src.supplementalData -> tgt.supplementalData;
  src.evaluatedResource -> tgt.evaluatedResource;
}

group MeasureReportGroup(source src, target tgt) extends BackboneElement {
  src.linkId -> tgt.linkId;
  src.code -> tgt.code;
  src.subject -> tgt.subject;
  src.population as s -> tgt.population as t then MeasureReportGroupPopulation(s,t);
  src.measureScore : Quantity -> tgt.measureScore;
  src.measureScore : dateTime -> tgt.measureScore;
  src.measureScore : CodeableConcept -> tgt.measureScore;
  src.measureScore : Period -> tgt.measureScore;
  src.measureScore : Range -> tgt.measureScore;
  src.measureScore : Duration -> tgt.measureScore;
  src.stratifier as s -> tgt.stratifier as t then MeasureReportGroupStratifier(s,t);
}

group MeasureReportGroupPopulation(source src, target tgt) extends BackboneElement {
  src.linkId -> tgt.linkId;
  src.code -> tgt.code;
  src.count -> tgt.count;
  src.subjectResults -> tgt.subjectResults;
  src.subjectReport -> tgt.subjectReport;
  src.subjects -> tgt.subjects;
}

group MeasureReportGroupStratifier(source src, target tgt) extends BackboneElement {
  src.linkId -> tgt.linkId;
  src.code -> tgt.code;
  src.stratum as s -> tgt.stratum as t then MeasureReportGroupStratifierStratum(s,t);
}

group MeasureReportGroupStratifierStratum(source src, target tgt) extends BackboneElement {
  src.value : CodeableConcept -> tgt.value;
  src.value : boolean -> tgt.value;
  src.value : Quantity -> tgt.value;
  src.value : Range -> tgt.value;
  src.value : Reference -> tgt.value;
  src.component as s -> tgt.component as t then MeasureReportGroupStratifierStratumComponent(s,t);
  src.population as s -> tgt.population as t then MeasureReportGroupStratifierStratumPopulation(s,t);
  src.measureScore : Quantity -> tgt.measureScore;
  src.measureScore : dateTime -> tgt.measureScore;
  src.measureScore : CodeableConcept -> tgt.measureScore;
  src.measureScore : Period -> tgt.measureScore;
  src.measureScore : Range -> tgt.measureScore;
  src.measureScore : Duration -> tgt.measureScore;
}

group MeasureReportGroupStratifierStratumComponent(source src, target tgt) extends BackboneElement {
  src.linkId -> tgt.linkId;
  src.code -> tgt.code;
  src.value : CodeableConcept -> tgt.value;
  src.value : boolean -> tgt.value;
  src.value : Quantity -> tgt.value;
  src.value : Range -> tgt.value;
  src.value : Reference -> tgt.value;
}

group MeasureReportGroupStratifierStratumPopulation(source src, target tgt) extends BackboneElement {
  src.linkId -> tgt.linkId;
  src.code -> tgt.code;
  src.count -> tgt.count;
  src.subjectResults -> tgt.subjectResults;
  src.subjectReport -> tgt.subjectReport;
  src.subjects -> tgt.subjects;
}

