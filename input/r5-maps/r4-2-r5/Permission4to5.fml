/// url = 'http://hl7.org/fhir/StructureMap/Permission4to5'
/// name = 'Permission4to5'
/// title = 'FML Conversion for Permission: R4 to R5'

conceptmap "ConsentDataMeaning" {
  prefix s = "http://hl7.org/fhir/4.0/consent-data-meaning"
  prefix t = "http://hl7.org/fhir/consent-data-meaning"

  s:"instance" - t:"instance"
  s:"related" - t:"related"
  s:"dependents" - t:"dependents"
  s:"authoredby" - t:"authoredby"
}

conceptmap "PermissionCombining" {
  prefix s = "http://hl7.org/fhir/4.0/permission-rule-combining"
  prefix t = "http://hl7.org/fhir/permission-rule-combining"

  s:"deny-overrides" - t:"deny-overrides"
  s:"permit-overrides" - t:"permit-overrides"
  s:"ordered-deny-overrides" - t:"ordered-deny-overrides"
  s:"ordered-permit-overrides" - t:"ordered-permit-overrides"
  s:"deny-unless-permit" - t:"deny-unless-permit"
  s:"permit-unless-deny" - t:"permit-unless-deny"
}

conceptmap "PermissionProvisionType" {
  prefix s = "http://hl7.org/fhir/4.0/consent-provision-type"
  prefix t = "http://hl7.org/fhir/consent-provision-type"

  s:"deny" - t:"deny"
  s:"permit" - t:"permit"
}

conceptmap "PermissionStatus" {
  prefix s = "http://hl7.org/fhir/4.0/permission-status"
  prefix t = "http://hl7.org/fhir/permission-status"

  s:"active" - t:"active"
  s:"entered-in-error" - t:"entered-in-error"
  s:"draft" - t:"draft"
  s:"rejected" - t:"rejected"
}

uses "http://hl7.org/fhir/4.0/StructureDefinition/Permission" alias PermissionR4 as source
uses "http://hl7.org/fhir/StructureDefinition/Permission" alias PermissionR5 as target

imports "http://hl7.org/fhir/StructureMap/*4to5"

group Permission(source src : PermissionR4, target tgt : PermissionR5) extends DomainResource <<type+>> {
  src.status as v -> tgt.status = translate(v, '#PermissionStatus', 'code');
  src.asserter -> tgt.asserter;
  src.date -> tgt.date;
  src.validity -> tgt.validity;
  src.justification as s -> tgt.justification as t then PermissionJustification(s,t);
  src.combining as v -> tgt.combining = translate(v, '#PermissionCombining', 'code');
  src.rule as s -> tgt.rule as t then PermissionRule(s,t);
}

group PermissionJustification(source src, target tgt) extends BackboneElement {
  src.basis -> tgt.basis;
  src.evidence -> tgt.evidence;
}

group PermissionRule(source src, target tgt) extends BackboneElement {
  src.type as v -> tgt.type = translate(v, '#PermissionProvisionType', 'code');
  src.data as s -> tgt.data as t then PermissionRuleData(s,t);
  src.activity as s -> tgt.activity as t then PermissionRuleActivity(s,t);
  src.limit -> tgt.limit;
}

group PermissionRuleData(source src, target tgt) extends BackboneElement {
  src.resource as s -> tgt.resource as t then PermissionRuleDataResource(s,t);
  src.security -> tgt.security;
  src.period -> tgt.period;
  src.expression -> tgt.expression;
}

group PermissionRuleDataResource(source src, target tgt) extends BackboneElement {
  src.meaning as v -> tgt.meaning = translate(v, '#ConsentDataMeaning', 'code');
  src.reference -> tgt.reference;
}

group PermissionRuleActivity(source src, target tgt) extends BackboneElement {
  src.actor -> tgt.actor;
  src.action -> tgt.action;
  src.purpose -> tgt.purpose;
}

