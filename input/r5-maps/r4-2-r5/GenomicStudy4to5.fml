/// url = 'http://hl7.org/fhir/StructureMap/GenomicStudy4to5'
/// name = 'GenomicStudy4to5'
/// title = 'FML Conversion for GenomicStudy: R4 to R5'

conceptmap "GenomicStudyStatus" {
  prefix s = "http://hl7.org/fhir/4.0/genomicstudy-status"
  prefix t = "http://hl7.org/fhir/genomicstudy-status"

  s:"registered" - t:"registered"
  s:"available" - t:"available"
  s:"cancelled" - t:"cancelled"
  s:"entered-in-error" - t:"entered-in-error"
  s:"unknown" - t:"unknown"
}

uses "http://hl7.org/fhir/4.0/StructureDefinition/GenomicStudy" alias GenomicStudyR4 as source
uses "http://hl7.org/fhir/StructureDefinition/GenomicStudy" alias GenomicStudyR5 as target

imports "http://hl7.org/fhir/StructureMap/*4to5"

group GenomicStudy(source src : GenomicStudyR4, target tgt : GenomicStudyR5) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.status as v -> tgt.status = translate(v, '#GenomicStudyStatus', 'code');
  src.type -> tgt.type;
  src.subject -> tgt.subject;
  src.encounter -> tgt.encounter;
  src.startDate -> tgt.startDate;
  src.basedOn -> tgt.basedOn;
  src.referrer -> tgt.referrer;
  src.interpreter -> tgt.interpreter;
  src.reason -> tgt.reason;
  src.instantiatesCanonical -> tgt.instantiatesCanonical;
  src.instantiatesUri -> tgt.instantiatesUri;
  src.note -> tgt.note;
  src.description -> tgt.description;
  src.analysis as s -> tgt.analysis as t then GenomicStudyAnalysis(s,t);
}

group GenomicStudyAnalysis(source src, target tgt) extends BackboneElement {
  src.identifier -> tgt.identifier;
  src.methodType -> tgt.methodType;
  src.changeType -> tgt.changeType;
  src.genomeBuild -> tgt.genomeBuild;
  src.instantiatesCanonical -> tgt.instantiatesCanonical;
  src.instantiatesUri -> tgt.instantiatesUri;
  src.title -> tgt.title;
  src.focus -> tgt.focus;
  src.specimen -> tgt.specimen;
  src.date -> tgt.date;
  src.note -> tgt.note;
  src.protocolPerformed -> tgt.protocolPerformed;
  src.regionsStudied -> tgt.regionsStudied;
  src.regionsCalled -> tgt.regionsCalled;
  src.input as s -> tgt.input as t then GenomicStudyAnalysisInput(s,t);
  src.output as s -> tgt.output as t then GenomicStudyAnalysisOutput(s,t);
  src.performer as s -> tgt.performer as t then GenomicStudyAnalysisPerformer(s,t);
  src.device as s -> tgt.device as t then GenomicStudyAnalysisDevice(s,t);
}

group GenomicStudyAnalysisInput(source src, target tgt) extends BackboneElement {
  src.file -> tgt.file;
  src.type -> tgt.type;
  src.generatedBy : Identifier -> tgt.generatedBy;
  src.generatedBy : Reference -> tgt.generatedBy;
}

group GenomicStudyAnalysisOutput(source src, target tgt) extends BackboneElement {
  src.file -> tgt.file;
  src.type -> tgt.type;
}

group GenomicStudyAnalysisPerformer(source src, target tgt) extends BackboneElement {
  src.actor -> tgt.actor;
  src.role -> tgt.role;
}

group GenomicStudyAnalysisDevice(source src, target tgt) extends BackboneElement {
  src.device -> tgt.device;
  src.function -> tgt.function;
}

